""" Step 1: Validate and store raw sensor data generated by the micro:bit sleep tracker. """ 

import csv # For processing CSV files.

# Define functions to validate and store data gathered from the embedded system.


def process_values(input_list): 
    """
    Convert numerical values to integers and preserve empty strings.
    Args:
        input_list: List of string values to process.
    Returns:
        List of integers and empty strings.
    """

    return_list = [] # Empty list to store the processed values.

    for val in input_list:
        if val == '':
            return_list.append(val) # Preserve empty strings to later filter out key:value pairs where value = ''.
        else:
            return_list.append(int(val)) # Convert all non-empty numerical values to integers.
    return return_list # Return processed list.


def remove_pairs(input_dict): 
    """
    Remove key:value pairs where value is an empty string.
    Args:
        input_dict: Dictionary with potential empty string values.
    Returns:
        Dictionary with empty string values removed.
    """
    return_dict = {} # Create an empty dictionary to store valid pairs.

    # Iterate through each key:value pair in the input dictionary.
    for key, value in input_dict.items():
        if value != '': # If the value is not an empty string,
            return_dict[key] = value # Add the key:value pair to the return dictionary.
    return return_dict # Return the processed dictionary.


def filter_sound_readings(input_dict): 
    """
    Remove invalid sound readings over 80 dB.
    Args:
        input_dict: Dictionary containing sound readings.
    Returns:
        Dictionary with readings over 80 dB removed.
    """
    return_dict = {} # Create an empty dictionary to store valid sound readings.

    for key, value in input_dict.items():
        if value <= 80: 
            return_dict[key] = value
    return return_dict


def main():
    """ Execute the data validation and storage process. """

    # Create empty lists - these will be populated with data from the csv file.
    times = []
    light, sound, temp, movement = [], [], [], []

    # Read from the CSV file, containing raw sleep tracking data. 
    with open("project/data/sleep_data_raw.csv", newline='') as data_csv:
        csv_reader = csv.DictReader(data_csv, delimiter=",")
        
        # Populating times and logger lists
        for row in csv_reader:
            times.append(row['Time (seconds)'])
            light.append(row['light'])
            sound.append(row['sound'])
            temp.append(row['temp'])
            movement.append(row['movement'])


    times = [float(time) for time in times] # Convert string values to float
    light = process_values(light) # Apply the process_values function to convert light readings, repeating for each sensor type.
    sound = process_values(sound)
    temp = process_values(temp) 
    movement = process_values(movement)

    # Initalise dictionaries, pairing times with values.
    light_dict = dict(zip(times, light))
    sound_dict = dict(zip(times, sound))
    temp_dict = dict(zip(times, temp))
    movement_dict = dict(zip(times, movement))

    # Remove empty value pairs
    light_dict = remove_pairs(light_dict) # Apply the remove_pairs function to each dictionary.
    sound_dict = remove_pairs(sound_dict)
    temp_dict = remove_pairs(temp_dict)
    movement_dict = remove_pairs(movement_dict)

    # Adjust teamperature readings by subtracting 3 degrees.
    temp_dict = dict(zip(times, [temp - 3 for temp in temp_dict.values()]))

    # Filter out invalid sound readings. 
    sound_dict = filter_sound_readings(sound_dict)

    return light_dict, sound_dict, temp_dict, movement_dict  # Return the dictionaries containing validated sensor data.


if __name__ == "__main__":
    light_dict, sound_dict, temp_dict, movement_dict = main()  # Call the main function and unpack the returned dictionaries.

    print("\nValidation and storage complete.\n")
    # The dictionaries light_dict, sound_dict, temp_dict, and movement_dict now contain the validated sensor data.



# --- Note ---
# Light readings drop to 0 lux after ~28 seconds, likely due to sensor settling.
# No filtering is applied to preserve the only meaningful variance in the light dataset.